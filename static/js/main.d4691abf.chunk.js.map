{"version":3,"sources":["components/Video.js","components/singleVideo.js","components/Youtube.js","App.js","serviceWorker.js","index.js"],"names":["Video","react_default","a","createElement","className","style","cursor","src","this","props","thumbnail","height","width","alt","title","console","log","data","Component","singleVideo","concat","videoId","target","href","chanelId","chName","publishedAt","API_KEY","Youtube","state","term","selectedVideo","handelSubmit","e","preventDefault","_this","YT","key","setState","id","_this2","onSubmit","type","placeholder","onChange","value","components_singleVideo","snippet","changeVideo","channelTitle","channelId","map","video","index","onClick","bind","components_Video","thumbnails","medium","url","App","components_Youtube","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d4691abf.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./style.css\";\n\nclass Video extends Component {\n  render() {\n    return (\n      <div\n        className=\"container side-video m-1 bordered rounded border\"\n        style={{ cursor: \"pointer\" }}\n      >\n        <div className=\"mt-2\">\n          <img src={this.props.thumbnail} height=\"100\" width=\"auto\" alt=\"\" />\n          <p className=\"mt-2 lead vidoe-title\">{this.props.title}</p>\n          {console.log(this.props.data)}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Video;\n","import React, { Component } from \"react\";\n\nclass singleVideo extends Component {\n  render() {\n    return (\n      <div>\n        <iframe\n          width=\"95%\"\n          height=\"450px\"\n          src={`https://www.youtube.com/embed/${this.props.videoId}`}\n        />\n        <h4 className=\"lead text-left\">{this.props.title}</h4>\n        <h3 className=\"lead text-left text-primary\">\n          {\" \"}\n          <span className=\"text-info\">Channel Name: </span>{\" \"}\n          <a\n            target=\"_blank\"\n            href={`https://www.youtube.com/channel/${this.props.chanelId}`}\n          >\n            {this.props.chName}\n          </a>\n        </h3>\n        <h6 className=\"h6 lead text-left text-danger\">\n          <span className=\"text-info\">Created At:</span>{\" \"}\n          {this.props.publishedAt}\n        </h6>\n      </div>\n    );\n  }\n}\n\nexport default singleVideo;\n","import React, { Component } from \"react\";\nimport YT from \"youtube-api-search\";\nimport Video from \"./Video\";\nimport SingleVideo from \"./singleVideo\";\nconst API_KEY = \"AIzaSyBMP9Raxx3tu2t1rgREmGz_pB36uKCIQlQ\";\n\nclass Youtube extends Component {\n  state = {\n    term: \"\",\n    data: \"\",\n    selectedVideo: 0\n  };\n  handelSubmit = e => {\n    e.preventDefault();\n    if (this.state.term !== \"\") {\n      const { term } = this.state;\n      YT({ key: API_KEY, term: term }, data => {\n        this.setState({ data });\n      });\n    }\n  };\n  changeVideo(id) {\n    this.setState({ selectedVideo: id });\n  }\n  render() {\n    return (\n      <div className=\"container-fluid my-4\">\n        <form onSubmit={this.handelSubmit}>\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            placeholder=\"Search YouTube\"\n            onChange={e => {\n              this.setState({\n                term: e.target.value\n              });\n            }}\n          />\n        </form>\n        <div className=\"row mt-3\">\n          <div className=\"col-md-8\">\n            {this.state.data !== \"\" ? (\n              <SingleVideo\n                title={this.state.data[this.state.selectedVideo].snippet.title}\n                videoId={this.state.data[this.state.selectedVideo].id.videoId}\n                changeVideo={this.changeVideo}\n                chName={\n                  this.state.data[this.state.selectedVideo].snippet.channelTitle\n                }\n                chanelId={\n                  this.state.data[this.state.selectedVideo].snippet.channelId\n                }\n                publishedAt={\n                  this.state.data[this.state.selectedVideo].snippet.publishedAt\n                }\n              />\n            ) : null}\n          </div>\n          <div className=\"col-md-4\">\n            {this.state.data !== \"\"\n              ? this.state.data.map((video, index) => (\n                  <div onClick={this.changeVideo.bind(this, index)}>\n                    <Video\n                      data={video}\n                      title={video.snippet.title}\n                      thumbnail={video.snippet.thumbnails.medium.url}\n                      videoId={video.id.videoId}\n                    />\n                  </div>\n                ))\n              : null}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Youtube;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport YouTube from \"./components/Youtube.js\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <h1 className=\"text-center text-danger\">\n          YouTube Search With React.js{\" \"}\n          <span className=\"text-info h4\">Made By M.Alvee</span>\n        </h1>\n        <YouTube />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}